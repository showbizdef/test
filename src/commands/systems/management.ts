import type { CommandData, SlashCommandProps, CommandOptions } from "commandkit";
import { APIEmbedField, ApplicationCommandOptionType, EmbedBuilder, TextChannel, User } from "discord.js";

import ManagementMember from "@schemas/ManagementMember";
import Configuration from "@schemas/Configuration";

import { COMPANY_OWNER_ROLE_ID, DISCORD_MASTER_ROLE_ID } from "@constants/roles";
import { capitalize } from "@utils/capitalize";
import { hasRole } from "@utils/roles/hasRole";

import {
  INTRODUCTION_EMBED_DESCRIPTION,
  INTRODUCTION_EMBED_TITLE,
  MANAGEMENT_EMBED_TITLE,
  OWNERS_EMBED_DESCRIPTION,
  OWNERS_EMBED_TITLE,
} from "@data/management/management-embeds";

export const data: CommandData = {
  name: "management",
  description: "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ —Å—Ç—Ä–∞—Ö–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏",
  options: [
    {
      name: "member",
      description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–ª–µ–Ω–∞–º–∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞",
      type: ApplicationCommandOptionType.SubcommandGroup,
      options: [
        {
          name: "add",
          description: "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —á–ª–µ–Ω–∞ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞",
          type: ApplicationCommandOptionType.Subcommand,
          options: [
            {
              name: "user",
              description: "–£–ø–æ–º—è–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å",
              type: ApplicationCommandOptionType.User,
              required: true,
            },
            {
              name: "account-id",
              description: "UID –∞–∫–∫–∞—É–Ω—Ç—ã –∞—Ä–∏–∑–æ–Ω—ã",
              type: ApplicationCommandOptionType.String,
              required: true,
            },
            {
              name: "nickname",
              description: "–ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º",
              type: ApplicationCommandOptionType.String,
              required: true,
            },
            {
              name: "position",
              description: "–†–∞–Ω–≥ (9/10/11)",
              type: ApplicationCommandOptionType.Number,
              min_value: 9,
              max_value: 11,
              required: true,
            },
            {
              name: "responsibilities",
              description: "–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏",
              type: ApplicationCommandOptionType.String,
            },
          ],
        },
        {
          name: "remove",
          description: "–°–Ω—è—Ç—å —á–ª–µ–Ω–∞ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞",
          type: ApplicationCommandOptionType.Subcommand,
          options: [
            {
              name: "user",
              description: "–£–ø–æ–º—è–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å",
              type: ApplicationCommandOptionType.User,
              required: true,
            },
          ],
        },
        {
          name: "shares",
          description: "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∏ —á–ª–µ–Ω–∞ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞",
          type: ApplicationCommandOptionType.Subcommand,
          options: [
            {
              name: "user",
              description: "–£–ø–æ–º—è–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å",
              type: ApplicationCommandOptionType.User,
              required: true,
            },
            {
              name: "percent",
              description: "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∏ (–æ—Ç 0 –¥–æ 100)",
              type: ApplicationCommandOptionType.Number,
              min_value: 0,
              max_value: 100,
              required: true,
            },
          ],
        },
      ],
    },
    {
      name: "message",
      description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä—É–∫–æ–≤–æ–¥—è—â–µ–≥–æ —Å–æ—Å—Ç–∞–≤–∞",
      type: ApplicationCommandOptionType.SubcommandGroup,
      options: [
        {
          name: "create",
          description: "–°–æ–∑–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä—É–∫–æ–≤–æ–¥—è—â–µ–≥–æ —Å–æ—Å—Ç–∞–≤–∞",
          type: ApplicationCommandOptionType.Subcommand,
        },
      ],
    },
  ],
};

export async function run({ interaction, client, handler }: SlashCommandProps) {
  if (!interaction.inCachedGuild()) return;
  if (!(hasRole(interaction, COMPANY_OWNER_ROLE_ID) || hasRole(interaction, DISCORD_MASTER_ROLE_ID)))
    return interaction.reply({ content: "üî¥ –£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", ephemeral: true });

  switch (interaction.options.getSubcommandGroup()) {
    case "member": {
      switch (interaction.options.getSubcommand()) {
        case "add": {
          try {
            await interaction.deferReply({ ephemeral: true });

            const user: User = interaction.options.getUser("user")!;
            const accountId: string = interaction.options.getString("account-id")!;
            const nickname: string = interaction.options.getString("nickname")!;
            const position: number = interaction.options.getNumber("position")!;
            const responsibilities: string = interaction.options.getString("responsibilities") || "";

            const newManagementMember = new ManagementMember({
              userId: user.id,
              accountId,
              nickname,
              position,
              responsibilities,
            });

            await newManagementMember.save();
            
            const POSITIONS: { [key: number]: string } = {
              9: "–∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞",
              10: "–¥–∏—Ä–µ–∫—Ç–æ—Ä–∞",
              11: "–≤–ª–∞–¥–µ–ª—å—Ü–∞",
            };

            const formattedPosition = POSITIONS[position];

            interaction.editReply(
              `üü¢ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–ª–∏ ${user} –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∫–∞–∫ –Ω–æ–≤–æ–≥–æ ${formattedPosition} –∫–æ–º–ø–∞–Ω–∏–∏.`
            );
          } catch (error) {
            interaction.editReply(
              `üî¥ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –Ω–æ–≤–æ–≥–æ —á–ª–µ–Ω–∞ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –æ—à–∏–±–∫—É –í–∞—à–µ–º—É –¥–∏—Å–∫–æ—Ä–¥ –º–∞—Å—Ç–µ—Ä—É.\n\n\`\`\`${error}\`\`\``
            );
          }
          break;
        }
        case "remove": {
          try {
            await interaction.deferReply({ ephemeral: true });

            const user: User = interaction.options.getUser("user")!;
            const managementMember = await ManagementMember.findOneAndDelete({ userId: user.id });

            if (!managementMember?.value) {
              return interaction.editReply("üî¥ –£–∫–∞–∑–∞–Ω–Ω—ã–π –í–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.");
            }

            const deletedDocument = managementMember.value;

            const POSITIONS: { [key: number]: string } = {
              9: "–∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å",
              10: "–ª–∏–¥–µ—Ä",
              11: "–≤–ª–∞–¥–µ–ª–µ—Ü",
            };

            const formattedPosition = capitalize(POSITIONS[deletedDocument.position]);

            interaction.editReply(
              `üü¢ ${formattedPosition} <@${deletedDocument.userId}> –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.`
            );
          } catch (error) {
            interaction.editReply(`üî¥ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–ª–µ–Ω–∞ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞: \`\`\`${error.message}\`\`\``);
          }
          break;
        }
        case "shares": {
          try {
            await interaction.deferReply({ ephemeral: true });

            const user: User = interaction.options.getUser("user")!;
            const percent: number = interaction.options.getNumber("percent")!;
            const member = await ManagementMember.findOneAndUpdate(
              { userId: user.id },
              { shares_pct: percent / 100 },
              { new: true }
            );

            if (!member) {
              return interaction.editReply("üî¥ –£–∫–∞–∑–∞–Ω–Ω—ã–π –í–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.");
            }

            const POSITIONS: { [key: number]: string } = {
              9: "–∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞",
              10: "–¥–∏—Ä–µ–∫—Ç–æ—Ä–∞",
              11: "–≤–ª–∞–¥–µ–ª—å—Ü–∞",
            };

            const position = POSITIONS[member.position];
            const userId = member.userId;

            interaction.editReply(
              `üü¢ –ü—Ä–æ—Ü–µ–Ω—Ç ${position} <@${userId}> –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω. –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: **${Math.floor(member.shares_pct * 100)}%**.`
            );
          } catch (error) {
            interaction.editReply(`üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ–ª–∏: \`\`\`${error.message}\`\`\``);
          }
          break;
        }
      }
      break;
    }

    case "message": {
      switch (interaction.options.getSubcommand()) {
        case "create": {
          await interaction.deferReply({ ephemeral: true });

          const owners = await ManagementMember.find({ position: 11 });
          const director = await ManagementMember.findOne({ position: 10 });
          const deputies = await ManagementMember.find({ position: 9 });

          const directorField = {
            name: "–î–∏—Ä–µ–∫—Ç–æ—Ä –∫–æ–º–ø–∞–Ω–∏–∏",
            value: `<@${director?.userId}> ‚Äî ${director?.responsibilities}`,
          };

          const deputyFields = deputies.map((deputy) => ({
            name: "–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –∫–æ–º–ø–∞–Ω–∏–∏",
            value: `<@${deputy.userId}> ‚Äî ${deputy.responsibilities}`,
            inline: true,
          }));

          const fields: APIEmbedField[] = [directorField, ...deputyFields];

          Configuration.findOne({ guildId: interaction.guild.id })
            .then((document) => {
              if (!document) throw new Error(`üî¥ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.`);
              if (!document.loggingChannelId)
                throw new Error(
                  `üî¥ –ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π </systems management setup:1162424704120934481>.`
                );

              const managementChannelId = document.managementChannelId;
              const managementChannel = interaction.guild.channels.cache.get(managementChannelId)! as TextChannel;

              const introductionEmbed = new EmbedBuilder()
                .setTitle(INTRODUCTION_EMBED_TITLE)
                .setDescription(INTRODUCTION_EMBED_DESCRIPTION)
                .setTimestamp()
                .setFooter({
                  text: interaction.client.user!.username,
                  iconURL: interaction.client.user!.displayAvatarURL(),
                })
                .addFields(fields);

              managementChannel.send({ embeds: [introductionEmbed] });
              interaction.editReply("üü¢ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Å–ø–∏—Å–∫–æ–º —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.");
            })
            .catch((error) => {
              interaction.editReply(error.message);
            });
          break;
        }
      }
      break;
    }
  }
}
