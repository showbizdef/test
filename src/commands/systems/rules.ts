import Configuration from "@schemas/Configuration";
import type { CommandData, SlashCommandProps, CommandOptions } from "commandkit";
import { ApplicationCommandOptionType } from "discord.js";

export const data: CommandData = {
  name: "rules",
  description: "–°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤–∏–ª",
  options: [
    {
      name: "add",
      description: "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞",
      type: ApplicationCommandOptionType.Subcommand,
      options: [
        {
          name: "category",
          description: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è, –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –¥–æ–±–∞–≤–ª—è–µ–º–æ–µ –ø—Ä–∞–≤–∏–ª–æ",
          type: ApplicationCommandOptionType.String,
          required: true,
        },
        {
          name: "rule",
          description: "–ù–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ",
          type: ApplicationCommandOptionType.String,
          required: true,
        },
      ],
    },
    {
      name: "message",
      description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏",
      type: ApplicationCommandOptionType.SubcommandGroup,
      options: [
        {
          name: "create",
          description: "–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏",
          type: ApplicationCommandOptionType.Subcommand,
        },
        {
          name: "update",
          description: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏",
          type: ApplicationCommandOptionType.Subcommand,
        },
      ],
    },
  ],
};

export async function run({ interaction, client, handler }: SlashCommandProps) {
  if (!interaction.inCachedGuild()) return;

  switch (interaction.options.getSubcommand()) {
    case "add": {
      await interaction.deferReply({ ephemeral: true });
      break;
    }
  }

  switch (interaction.options.getSubcommandGroup()) {
    case "message": {
      switch (interaction.options.getSubcommand()) {
        case "create": {
          await interaction.deferReply({ ephemeral: true });

          Configuration.findOne({ guildId: interaction.guildId })
            .then((document) => {
              if (!document)
                throw new Error(
                  `üî¥ –ë–æ—Ç –Ω–µ –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π </init:1162414777369362492>.`
                );
            })
            .catch((error) => interaction.editReply(error.message));
          break;
        }
        case "update": {
          await interaction.deferReply({ ephemeral: true });

          Configuration.findOne({ guildId: interaction.guildId })
            .then((document) => {
              if (!document)
                throw new Error(
                  `üî¥ –ë–æ—Ç –Ω–µ –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π </init:1162414777369362492>.`
                );
            })
            .catch((error) => interaction.editReply(error.message));
          break;
        }
      }
      break;
    }
  }
}

export const options: CommandOptions = {
  devOnly: true,
  guildOnly: true,
  userPermissions: ["Administrator"],
  deleted: true,
};
