import type { CommandData, SlashCommandProps, CommandOptions } from "commandkit";
import { ActionRowBuilder, ApplicationCommandOptionType, ButtonBuilder, EmbedBuilder, TextChannel } from "discord.js";

import { EMBED_DESCRIPTION, EMBED_TITLE } from "@data/logging/logging-embed";
import { LOGGING_BUTTONS } from "@data/logging/logging-buttons";

import Configuration from "@schemas/Configuration";

export const data: CommandData = {
  name: "logging",
  description: "–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
  options: [
    {
      name: "message",
      description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
      type: ApplicationCommandOptionType.SubcommandGroup,
      options: [
        {
          name: "create",
          description: "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–¥–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
          type: ApplicationCommandOptionType.Subcommand,
        },
      ],
    },
  ],
};

export async function run({ interaction, client, handler }: SlashCommandProps) {
  if (!interaction.inCachedGuild()) return;

  switch (interaction.options.getSubcommandGroup()) {
    case "message": {
      switch (interaction.options.getSubcommand()) {
        case "create": {
          await interaction.deferReply({ ephemeral: true });

          Configuration.findOne({ guildId: interaction.guild.id })
            .then((document) => {
              if (!document) throw new Error(`üî¥ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.`);
              if (!document.loggingChannelId)
                throw new Error(
                  `üî¥ –ö–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π </systems logging setup:1162424704120934481>.`
                );

              const loggingChannelId = document.loggingChannelId;
              const loggingChannel = interaction.guild.channels.cache.get(loggingChannelId)! as TextChannel;

              const loggingEmbed = new EmbedBuilder()
                .setTitle(EMBED_TITLE)
                .setDescription(EMBED_DESCRIPTION)
                .setTimestamp()
                .setFooter({
                  text: interaction.client.user.username,
                  iconURL: interaction.client.user.displayAvatarURL(),
                });

              const buttons = LOGGING_BUTTONS.map(({ id, label, style, emoji }) =>
                new ButtonBuilder().setCustomId(id).setLabel(label).setStyle(style).setEmoji(emoji)
              );

              const buttonsPerRow = 2;
              const rows: ActionRowBuilder<ButtonBuilder>[] = [];
              for (let i: number = 0; i < buttons.length; i += buttonsPerRow) {
                const row = new ActionRowBuilder<ButtonBuilder>().addComponents(buttons.slice(i, i + buttonsPerRow));
                rows.push(row);
              }

              loggingChannel.send({ embeds: [loggingEmbed], components: rows });

              interaction.editReply(
                `üü¢ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª ${loggingChannel}.`
              );
            })
            .catch((error) => interaction.editReply(error.message));

          break;
        }
      }
      break;
    }
  }
}

export const options: CommandOptions = {
  guildOnly: true,
  botPermissions: ["Administrator"],
  deleted: false,
};
