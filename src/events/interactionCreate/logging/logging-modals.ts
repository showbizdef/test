import { CommandKit } from "commandkit";
import { EmbedBuilder, TextChannel, type Client, type Interaction } from "discord.js";

import Payout from "@schemas/Payout";

import {
  PROMOTION_LOG_CHANNEL_ID,
  DISMISSAL_LOG_CHANNEL_ID,
  REPRIMAND_LOG_CHANNEL_ID,
  BLACKLIST_LOG_CHANNEL_ID,
} from "@constants/channels";

import { formatNumber } from "@utils/format-number";
import { isValidGuap } from "@utils/is-valid-guap";

export default async function (interaction: Interaction, client: Client<true>, handler: CommandKit) {
  if (!interaction.isModalSubmit()) return;
  if (!interaction.inCachedGuild()) return;

  switch (interaction.customId) {
    case "promotion-log-modal": {
      await interaction.deferReply({ ephemeral: true });

      const promotionLogChannel = interaction.client.channels.cache.get(PROMOTION_LOG_CHANNEL_ID) as TextChannel;

      const nickname = interaction.fields.getTextInputValue("nickname-input");
      const fromRank = interaction.fields.getTextInputValue("from-rank-input");
      const toRank = interaction.fields.getTextInputValue("to-rank-input");
      const guap = interaction.fields.getTextInputValue("guap-input");
      const addInfo = interaction.fields.getTextInputValue("ainfo-input");

      if (!isValidGuap(guap)) {
        await interaction.editReply(
          `ü§® –í—ã –Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ \`–°–∫–æ–ª—å–∫–æ –∑–∞–±–∞—à–ª—è–ª?\`, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—â—ë —Ä–∞–∑ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É. –ü–æ–ª–µ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä, —Ç–æ—á–∫–∏ (.), –∑–∞–ø—è—Ç–æ–π (,) –∏ –∑–Ω–∞–∫–∞ –¥–æ–ª–ª–∞—Ä–∞ ($).`
        );
        return;
      }

      const formattedGuap = formatNumber(guap).toLocaleString();

      const embed = new EmbedBuilder()
        .setTitle(`üü¢ –ü–æ–≤—ã—à–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ ${nickname}`)
        .setDescription(
          `–ò–≥—Ä–æ–∫ **${nickname}** –±—ã–ª –ø–æ–≤—ã—à–µ–Ω ${
            +fromRank === 2 ? "—Å–æ" : "—Å"
          } **${fromRank}-–π** –ø–æ—Ä—è–¥–∫–æ–≤–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –Ω–∞ **${toRank}-—é**, –ø–æ–ø–æ–ª–Ω–∏–≤ –±–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—à–µ–π –∫–∞–∑–Ω—ã –Ω–∞ —Å—É–º–º—É –≤ —Ä–∞–∑–º–µ—Ä–µ **${formattedGuap}$**.`
        )
        .setFields([
          { name: "–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", value: addInfo === "" ? "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" : addInfo, inline: true },
          { name: "–ü–æ–≤—ã—Å–∏–ª(-–∞)", value: `${interaction.user}`, inline: true },
        ])
        .setTimestamp()
        .setFooter({
          text: interaction.client.user.username,
          iconURL: interaction.client.user.displayAvatarURL(),
        });

      try {
        await promotionLogChannel.send({
          embeds: [embed],
        });

        const date = new Date();
        date.setHours(date.getHours() + 3);

        const sale = new Payout({
          userId: interaction.user.id,
          messageId: promotionLogChannel.lastMessageId,
          payout: formatNumber(guap),
          date: date,
        });

        await sale.save();

        await interaction.editReply(`üü¢ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –ª–æ–≥ –ø–æ–≤—ã—à–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ ${nickname}!`);
      } catch (error) {
        await interaction.editReply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error}.`);
        console.error(error);
      }

      break;
    }
    case "dismissal-log-modal": {
      await interaction.deferReply({ ephemeral: true });

      const dismissalLogChannel = interaction.client.channels.cache.get(DISMISSAL_LOG_CHANNEL_ID) as TextChannel;

      const nickname = interaction.fields.getTextInputValue("nickname-input");
      const reason = interaction.fields.getTextInputValue("reason-input");

      const embed = new EmbedBuilder()
        .setTitle(`üî¥ –£–≤–æ–ª—å–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ ${nickname}`)
        .setDescription(`–ò–≥—Ä–æ–∫ **${nickname}** –±—ã–ª —É–≤–æ–ª–µ–Ω.`)
        .setFields([
          { name: "–ü—Ä–∏—á–∏–Ω–∞", value: reason, inline: true },
          { name: "–£–≤–æ–ª–∏–ª(-–∞)", value: `${interaction.user}`, inline: true },
        ])
        .setTimestamp()
        .setFooter({
          text: interaction.client.user.username,
          iconURL: interaction.client.user.displayAvatarURL(),
        });

      await dismissalLogChannel.send({
        embeds: [embed],
      });

      await interaction.editReply(`üü¢ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –ª–æ–≥ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ ${nickname}!`);

      break;
    }
    case "reprimand-assign-log-modal": {
      await interaction.deferReply({ ephemeral: true });

      const reprimandLogChannel = interaction.client.channels.cache.get(REPRIMAND_LOG_CHANNEL_ID) as TextChannel;

      const nickname = interaction.fields.getTextInputValue("nickname-input");
      const reason = interaction.fields.getTextInputValue("reason-input");

      const embed = new EmbedBuilder()
        .setTitle(`üü† –í—ã–¥–∞—á–∞ –≤—ã–≥–æ–≤–æ—Ä–∞ –∏–≥—Ä–æ–∫—É ${nickname}`)
        .setDescription(`–ò–≥—Ä–æ–∫—É **${nickname}** –±—ã–ª –≤—ã–¥–∞–Ω –≤—ã–≥–æ–≤–æ—Ä.`)
        .setFields([
          { name: "–ü—Ä–∏—á–∏–Ω–∞", value: reason, inline: true },
          { name: "–í—ã–¥–∞–ª(-–∞)", value: `${interaction.user}`, inline: true },
        ])
        .setTimestamp()
        .setFooter({
          text: interaction.client.user.username,
          iconURL: interaction.client.user.displayAvatarURL(),
        });

      await reprimandLogChannel.send({
        embeds: [embed],
      });

      await interaction.editReply(`üü¢ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –ª–æ–≥ –≤—ã–¥–∞—á–∏ –≤—ã–≥–æ–≤–æ—Ä–∞ –∏–≥—Ä–æ–∫—É ${nickname}!`);

      break;
    }
    case "reprimand-remove-log-modal": {
      await interaction.deferReply({ ephemeral: true });

      const reprimandLogChannel = interaction.client.channels.cache.get(REPRIMAND_LOG_CHANNEL_ID) as TextChannel;

      const nickname = interaction.fields.getTextInputValue("nickname-input");
      const guap = interaction.fields.getTextInputValue("guap-input");

      if (!isValidGuap(guap)) {
        return await interaction.editReply(
          `ü§® –í—ã –Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ \`–°–∫–æ–ª—å–∫–æ –∑–∞–±–∞—à–ª—è–ª?\`, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—â—ë —Ä–∞–∑ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É. –ü–æ–ª–µ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä, —Ç–æ—á–∫–∏ (.), –∑–∞–ø—è—Ç–æ–π (,) –∏ –∑–Ω–∞–∫–∞ –¥–æ–ª–ª–∞—Ä–∞ ($).`
        );
      }

      const formattedGuap = formatNumber(guap).toLocaleString();

      const embed = new EmbedBuilder()
        .setTitle(`üü† –°–Ω—è—Ç–∏–µ –≤—ã–≥–æ–≤–æ—Ä–∞ –∏–≥—Ä–æ–∫—É ${nickname}`)
        .setDescription(
          `–ò–≥—Ä–æ–∫—É **${nickname}** –±—ã–ª —Å–Ω—è—Ç –≤—ã–≥–æ–≤–æ—Ä, –ø–æ–ø–æ–ª–Ω–∏–≤ –±–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—à–µ–π –∫–∞–∑–Ω—ã –Ω–∞ —Å—É–º–º—É –≤ —Ä–∞–∑–º–µ—Ä–µ **${formattedGuap}$**.`
        )
        .setFields([{ name: "–°–Ω—è–ª(-–∞)", value: `${interaction.user}` }])
        .setTimestamp()
        .setFooter({
          text: interaction.client.user.username,
          iconURL: interaction.client.user.displayAvatarURL(),
        });

      await reprimandLogChannel.send({
        embeds: [embed],
      });

      await interaction.editReply(`üü¢ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –ª–æ–≥ —Å–Ω—è—Ç–∏—è –≤—ã–≥–æ–≤–æ—Ä–∞ –∏–≥—Ä–æ–∫—É ${nickname}!`);

      break;
    }
    case "blacklist-assign-log-modal": {
      await interaction.deferReply({ ephemeral: true });

      const blacklistLogChannel = interaction.client.channels.cache.get(BLACKLIST_LOG_CHANNEL_ID) as TextChannel;

      const nickname = interaction.fields.getTextInputValue("nickname-input");
      const reason = interaction.fields.getTextInputValue("reason-input");
      const reinstatement = interaction.fields.getTextInputValue("reinstatement-input");

      const embed = new EmbedBuilder()
        .setTitle(`‚ö´ –ó–∞–Ω–µ—Å–µ–Ω–∏–µ –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–∞ ${nickname}`)
        .setDescription(
          `–ò–≥—Ä–æ–∫ **${nickname}** –±—ã–ª –∑–∞–Ω–µ—Å—ë–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ ${
            reinstatement.toLowerCase() === "–¥–∞" ? "—Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è" : "–±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
          }.`
        )
        .setFields([
          { name: "–ü—Ä–∏—á–∏–Ω–∞", value: reason, inline: true },
          { name: "–ó–∞–Ω–µ—Å(-–ª–∞)", value: `${interaction.user}`, inline: true },
        ])
        .setTimestamp()
        .setFooter({
          text: interaction.client.user.username,
          iconURL: interaction.client.user.displayAvatarURL(),
        });

      await blacklistLogChannel.send({
        embeds: [embed],
      });

      await interaction.editReply(`üü¢ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –ª–æ–≥ –∑–∞–Ω–µ—Å–µ–Ω–∏—è –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–∞ ${nickname}!`);

      break;
    }
    case "blacklist-remove-log-modal": {
      await interaction.deferReply({ ephemeral: true });

      const blacklistLogChannel = interaction.client.channels.cache.get(BLACKLIST_LOG_CHANNEL_ID) as TextChannel;

      const nickname = interaction.fields.getTextInputValue("nickname-input");
      const guap = interaction.fields.getTextInputValue("guap-input");

      if (!isValidGuap(guap)) {
        return await interaction.editReply(
          `ü§® –í—ã –Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ \`–°–∫–æ–ª—å–∫–æ –∑–∞–±–∞—à–ª—è–ª?\`, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—â—ë —Ä–∞–∑ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É. –ü–æ–ª–µ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä, —Ç–æ—á–∫–∏ (.), –∑–∞–ø—è—Ç–æ–π (,) –∏ –∑–Ω–∞–∫–∞ –¥–æ–ª–ª–∞—Ä–∞ ($).`
        );
      }

      const formattedGuap = formatNumber(guap).toLocaleString();

      const embed = new EmbedBuilder()
        .setTitle(`‚ö´ –í—ã–Ω–æ—Å –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–∞ ${nickname}`)
        .setDescription(
          `–ò–≥—Ä–æ–∫ **${nickname}** –±—ã–ª –≤—ã–Ω–µ—Å–µ–Ω –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, –ø–æ–ø–æ–ª–Ω–∏–≤ –±–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—à–µ–π –∫–∞–∑–Ω—ã –Ω–∞ —Å—É–º–º—É –≤ —Ä–∞–∑–º–µ—Ä–µ ${formattedGuap}$.`
        )
        .setFields([{ name: "–í—ã–Ω–µ—Å(-–ª–∞)", value: `${interaction.user}` }])
        .setTimestamp()
        .setFooter({
          text: interaction.client.user.username,
          iconURL: interaction.client.user.displayAvatarURL(),
        });

      await blacklistLogChannel.send({
        embeds: [embed],
      });

      await interaction.editReply(`üü¢ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –ª–æ–≥ –≤—ã–Ω–æ—Å–∞ –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–∞ ${nickname}!`);

      break;
    }
  }
}
