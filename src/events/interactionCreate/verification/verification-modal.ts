import { CommandKit } from "commandkit";
import {
  EmbedBuilder,
  TextChannel,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  ModalSubmitInteraction,
  type Client,
  type Interaction,
} from "discord.js";

import { VERIFICATION_APPLICATIONS_CHANNEL_ID } from "@constants/channels";
import {
  COMPANY_DEPUTY_DIRECTOR_ROLE_ID,
  COMPANY_DIRECTOR_ROLE_ID,
  COMPANY_OWNER_ROLE_ID,
  DISCORD_MASTER_ROLE_ID,
  VERIFICATION_WAIT_ROLE_ID,
} from "@constants/roles";

export default async function (interaction: Interaction, client: Client<true>, handler: CommandKit) {
  if (!interaction.isModalSubmit()) return;

  async function sendVerificationRequest(interaction: ModalSubmitInteraction, nickname: string, screenshotURL: string) {
    if (!interaction.inCachedGuild()) return;

    // –∫–∞–Ω–∞–ª —Å –∑–∞—è–≤–∫–∞–º–∏
    const verificationApplicationsChannel = interaction.client.channels.cache.get(
      VERIFICATION_APPLICATIONS_CHANNEL_ID
    ) as TextChannel;

    // —Ä–æ–ª—å "–û–∂–∏–¥–∞–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"
    const verificationWaitRole = interaction.guild.roles.cache.get(VERIFICATION_WAIT_ROLE_ID)!;

    // –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç
    if (!screenshotURL.startsWith("https://imgur.com/")) {
      throw new Error();
    }

    // –µ–º–±–µ–¥ –∑–∞–ø—Ä–æ—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const verificationRequestEmbed = new EmbedBuilder()
      .setTitle(`üïµÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –æ—Ç –∏–≥—Ä–æ–∫–∞ ${nickname}`)
      .setDescription(
        `–ò–≥—Ä–æ–∫ ${interaction.member.user} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é. –¢—â–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –µ–≥–æ –∑–∞—è–≤–∫—É –∏ –ø—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É, –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—É—é –∫ —Å–æ–æ–±—â–µ–Ω–∏—é.`
      )
      .setTimestamp()
      .setFooter({
        text: interaction.member.user.id,
        iconURL: interaction.member.user.displayAvatarURL(),
      });

    // –µ–º–±–µ–¥ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏
    const applicationSendResponseEmbed = new EmbedBuilder()
      .setTitle("ü§ì –ó–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
      .setDescription(
        `–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞, –í–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ${interaction.client.user}.`
      )
      .setTimestamp()
      .setFooter({
        text: interaction.client.user.username,
        iconURL: interaction.client.user.displayAvatarURL(),
      });

    // –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    const applicationButtonsRow = new ActionRowBuilder<ButtonBuilder>().addComponents(
      new ButtonBuilder().setLabel("–°–∫—Ä–∏–Ω—à–æ—Ç").setEmoji("üñºÔ∏è").setStyle(ButtonStyle.Link).setURL(screenshotURL),
      new ButtonBuilder()
        .setCustomId("approve-verification")
        .setLabel("–û–¥–æ–±—Ä–∏—Ç—å")
        .setEmoji("‚úÖ")
        .setStyle(ButtonStyle.Secondary),
      new ButtonBuilder()
        .setCustomId("deny-verification")
        .setLabel("–û—Ç–∫–∞–∑–∞—Ç—å")
        .setEmoji("‚ùé")
        .setStyle(ButtonStyle.Secondary),
      new ButtonBuilder()
        .setCustomId("close-verification")
        .setLabel("–ó–∞–∫—Ä—ã—Ç—å")
        .setEmoji("‚õî")
        .setStyle(ButtonStyle.Secondary)
    );

    // –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª —Å –∑–∞—è–≤–∫–∞–º–∏
    await verificationApplicationsChannel.send({
      content: `<@&${COMPANY_OWNER_ROLE_ID}> <@&${COMPANY_DIRECTOR_ROLE_ID}> <@&${COMPANY_DEPUTY_DIRECTOR_ROLE_ID}> <@&${DISCORD_MASTER_ROLE_ID}>`,
      embeds: [verificationRequestEmbed],
      components: [applicationButtonsRow],
    });

    // —Å–º–µ–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–∞ –Ω–∞ —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–ª –∏–≥—Ä–æ–∫ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    await interaction.member.setNickname(nickname);

    // –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–º—É –∑–∞—è–≤–∫—É
    await interaction.editReply({ embeds: [applicationSendResponseEmbed] });

    // –≤—ã–¥–∞—á–∞ —Ä–æ–ª–∏ "–û–∂–∏–¥–∞–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏" –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏
    await interaction.guild.members.addRole({
      user: interaction.member.user.id,
      role: verificationWaitRole,
    });
  }

  async function sendErrorResponse(interaction: ModalSubmitInteraction) {
    // –µ–º–±–µ–¥ –æ—à–∏–±–∫–∏ (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ-–≤–≤–µ–¥—ë–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏)
    const errorEmbed = new EmbedBuilder()
      .setTitle("üîó –£–∫–∞–∑–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞")
      .setDescription(
        `–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ç–æ—Ö–æ—Å—Ç–∏–Ω–≥ [imgur.com](https://imgur.com) –∏ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —É–∫–∞–∑–∞–ª–∏ –ª–∏ –í—ã –≤–∞–ª–∏–¥–Ω—É—é —Å—Å—ã–ª–∫—É (–≤–∞–ª–∏–¥–Ω–æ–π —Å—Å—ã–ª–∫–æ–π —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞, –Ω–∞—á–∏–Ω–∞—é—â–∞—è—Å—è —Å \`https://imgur.com/\`). –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –í—ã —É–≤–µ—Ä–µ–Ω–Ω—ã –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–π –í–∞–º–∏ —Å—Å—ã–ª–∫–∏, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å <@&${DISCORD_MASTER_ROLE_ID}>.`
      )
      .setTimestamp()
      .setFooter({
        text: interaction.client.user.username,
        iconURL: interaction.client.user.displayAvatarURL(),
      });

    // –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–º—É –∑–∞—è–≤–∫—É
    await interaction.editReply({
      embeds: [errorEmbed],
    });
  }

  switch (interaction.customId) {
    case "verification-modal": {
      try {
        await interaction.deferReply({ ephemeral: true });

        // –ø–æ–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        const nickname = interaction.fields.getTextInputValue("nickname-input");
        const screenshotURL = interaction.fields.getTextInputValue("screenshot-input");

        await sendVerificationRequest(interaction, nickname, screenshotURL);
      } catch (error) {
        await sendErrorResponse(interaction);
      }
      break;
    }
  }
}
