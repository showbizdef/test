import {
  BaseInteraction,
  CommandInteraction,
  Embed,
  EmbedBuilder,
  EmbedField,
  GuildBasedChannel,
  TextChannel,
} from "discord.js";

import Configuration from "@schemas/Configuration";
import { ISubscription } from "@schemas/Subscription";

import { getChannel } from "@utils/channels/getChannel";
import { getSubscriptions } from "@utils/subscription/getSubscriptions";
import { createSubscriptionEmbedFields } from "@utils/subscription/createSubscriptionEmbedFields";

import {
  TIER_EIGHT_EMBED_TITLE,
  TIER_EIGHT_SUBSCRIPTION_LIMIT,
  TIER_SEVEN_EMBED_TITLE,
  TIER_SEVEN_SUBSCRIPTION_LIMIT,
} from "@data/subscription/subscriptionListEmbed";

export async function updateSubscriptionMessage(interaction: CommandInteraction | BaseInteraction) {
  if (!interaction.inCachedGuild()) return;

  // –ø–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const document = await Configuration.findOne({ guildId: interaction.guildId });

  if (!document) {
    throw new Error("üî¥ –ë–æ—Ç –Ω–µ –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π </init:1162414777369362492>.");
  }

  // –ø–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 7-8 —Ä–∞–Ω–≥–∏
  const [tierSevenSubscriptions, tierEightSubscriptions]: ISubscription[][] = await getSubscriptions();

  // –ø–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–¥–ø–∏—Å–æ–∫
  const subscriptionListChannel: GuildBasedChannel | undefined = getChannel(
    interaction,
    document.subscriptionListChannelId
  );

  if (!subscriptionListChannel) {
    throw new Error("üî¥ –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.");
  }

  if (!(subscriptionListChannel instanceof TextChannel)) {
    throw new Error(
      `üî¥ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ ${subscriptionListChannel}, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª.`
    );
  }

  // –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–¥–ø–∏—Å–æ–∫
  const subscriptionsListChannelLastMessageId: string | null = subscriptionListChannel.lastMessageId;

  if (!subscriptionsListChannelLastMessageId) {
    throw new Error(
      `üî¥ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–µ—Ç –ª–∏ –≤ –∫–∞–Ω–∞–ª–µ ${subscriptionListChannel} –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫—Ä–æ–º–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º –æ—Ç ${interaction.client.user}.`
    );
  }

  // –ø–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
  const subscriptionsListMessage = await subscriptionListChannel.messages.fetch(subscriptionsListChannelLastMessageId);

  // –ø–æ–ª—É—á–∞–µ–º –µ–º–±–µ–¥—ã –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  const [firstEmbed, secondEmbed, thirdEmbed]: Embed[] = subscriptionsListMessage.embeds;

  // –ø–æ –Ω–æ–≤–æ–π —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
  const secondEmbedFields = createSubscriptionEmbedFields(tierSevenSubscriptions);
  const thirdEmbedFields = createSubscriptionEmbedFields(tierEightSubscriptions);

  // –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π –µ–º–±–µ–¥ (7 —Ä–∞–Ω–≥–∏)
  const updatedSecondEmbed = createUpdatedEmbed(
    secondEmbed,
    TIER_SEVEN_EMBED_TITLE,
    tierSevenSubscriptions.length,
    TIER_SEVEN_SUBSCRIPTION_LIMIT,
    secondEmbedFields,
    interaction.client.user.displayAvatarURL()
  );

  // –æ–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ—Ç–∏–π –µ–º–±–µ–¥ (8 —Ä–∞–Ω–≥–∏)
  const updatedThirdEmbed = createUpdatedEmbed(
    thirdEmbed,
    TIER_EIGHT_EMBED_TITLE,
    tierEightSubscriptions.length,
    TIER_EIGHT_SUBSCRIPTION_LIMIT,
    thirdEmbedFields,
    interaction.client.user.displayAvatarURL()
  );

  // —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
  await subscriptionsListMessage.edit({ embeds: [firstEmbed, updatedSecondEmbed, updatedThirdEmbed] });
}

function createUpdatedEmbed(
  oldEmbed: Embed,
  title: string,
  subscriptionCount: number,
  subscriptionLimit: number,
  fields: EmbedField[],
  iconURL: string
): EmbedBuilder {
  return EmbedBuilder.from(oldEmbed)
    .setTitle(`${title} | ${subscriptionCount}/${subscriptionLimit}`)
    .setFields(fields)
    .setTimestamp()
    .setFooter({ text: "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", iconURL });
}
